pipeline {
    agent any
    
    environment {
        
        IMAGE_NAME = 'maybetuandat/vdt_backend'
        DOCKER_HUB_CREDENTIALS = 'dockerhub_credential' 
    }
    
    stages {
        stage('Checkout Source Code') {
            steps {
                echo "üîç Cloning source code..."
                checkout scm
                
                echo "‚úÖ Clone completed!"
                sh 'ls -la'
            }
        }
        
        stage('Get Git Tag Version') {
            steps {
                script {
                    echo "üè∑Ô∏è Getting Git tag version..."
                    
                    
                    def tagVersion = sh(
                        script: 'git describe --tags --exact-match 2>/dev/null || git rev-parse --short HEAD', 
                        returnStdout: true
                    ).trim()
                    
                    
                    env.TAG_NAME = tagVersion
                    
                    echo "üìå Using tag version: ${env.TAG_NAME}"
                    echo "üê≥ Docker image will be: ${env.IMAGE_NAME}:${env.TAG_NAME}"
                }
            }
        }
        
        stage('Verify Dockerfile') {
            steps {
                script {
                    echo "üìÑ Checking Dockerfile..."
                    
                    if (fileExists('Dockerfile')) {
                        echo "‚úÖ Dockerfile found!"
                        sh 'head -10 Dockerfile'
                    } else {
                        error "‚ùå Dockerfile not found! Please create Dockerfile in repository root."
                    }
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    echo "üî® Building Docker image: ${env.IMAGE_NAME}:${env.TAG_NAME}"
                    
                    // Build Docker image v·ªõi tag version
                    sh """
                        docker build -t ${env.IMAGE_NAME}:${env.TAG_NAME} .
                        docker tag ${env.IMAGE_NAME}:${env.TAG_NAME} ${env.IMAGE_NAME}:latest
                    """
                    
                    echo "‚úÖ Docker image built successfully!"
                    
                    // Verify image ƒë√£ ƒë∆∞·ª£c t·∫°o
                    sh "docker images | grep ${env.IMAGE_NAME}"
                }
            }
        }
        
        stage('Test Docker Image') {
            steps {
                script {
                    echo "üß™ Testing Docker image..."
                    
                    // Test image c√≥ ch·∫°y ƒë∆∞·ª£c kh√¥ng (optional)
                    sh """
                        echo "Testing if image can start..."
                        docker run --rm ${env.IMAGE_NAME}:${env.TAG_NAME} java -version || echo "Image test completed"
                    """
                }
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                script {
                    echo "üöÄ Pushing image to Docker Hub..."
                    
                    // Login Docker Hub v·ªõi credentials
                    withCredentials([usernamePassword(
                        credentialsId: env.DOCKER_HUB_CREDENTIALS, 
                        passwordVariable: 'DOCKER_PASSWORD', 
                        usernameVariable: 'DOCKER_USERNAME'
                    )]) {
                        sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin'
                    }
                    
                    // Push c·∫£ tagged version v√† latest
                    sh """
                        docker push ${env.IMAGE_NAME}:${env.TAG_NAME}
                        docker push ${env.IMAGE_NAME}:latest
                    """
                    
                    echo "‚úÖ Successfully pushed to Docker Hub!"
                    echo "üîó Image available at: https://hub.docker.com/r/maybetuandat/vdt_backend"
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo "üßπ Cleaning up local Docker images..."
                // Cleanup local images ƒë·ªÉ ti·∫øt ki·ªám disk space
                sh """
                    docker rmi ${env.IMAGE_NAME}:${env.TAG_NAME} || true
                    docker rmi ${env.IMAGE_NAME}:latest || true
                    docker system prune -f || true
                """
            }
        }
        success {
            echo "üéâ BUILD SUCCESS!"
            echo "‚úÖ Source code cloned"
            echo "‚úÖ Docker image built: ${env.IMAGE_NAME}:${env.TAG_NAME}"
            echo "‚úÖ Image pushed to Docker Hub"
            echo ""
            echo "üöÄ Ready for deployment!"
        }
        failure {
            echo "üí• BUILD FAILED!"
            echo "‚ùå Please check the logs above"
            echo "Common issues:"
            echo "- Dockerfile syntax error"
            echo "- Docker Hub credentials invalid"
            echo "- Network connectivity issues"
        }
    }
}